
exp_name: 'dia' # Experiment name
log_dir: 'data/dia/log' # Directory to save logs
seed: 0 # Random seed
task: 'train_dy' # Phase of the experiment. Should be in ['gen_data', 'train_dy','train_edge', 'plan']

### ENV ###
env:
  env_name: 'ClothDrop' # Environment name
  env_shape: null # Shape of the environment : [platform, sphere, rod]
  render_mode: 'cloth'
  observation_mode: 'cam_rgb'
  num_picker: 2 # Number of pickers
  action_repeat: 1 # Number of action repeat
  cached_states_path: 'dia.pkl' # Path to cached states
  num_variations: 100  # Number of variations of the environment
  partial_observable: true # Whether the environment is partially observable
  particle_radius: 0.00625 # Radius of the particles
  shape_state_dim: 14 # Dimension of the shape state [xyz, xyz_last, quat(4), quat_last(4)]
  vary_cloth_size: false # Whether to vary the size of the cloth
  vary_stiffness: false # Whether to vary the stiffness of the cloth
  vary_orientation: true # Whether to vary the target orientation of the cloth
  picker_threshold: 0.625
  picker_radius: 0.01

dataset:
  n_rollout: 5000 # Number of rollouts to collect
  time_step: 100 # Time steps per trajectory
  dt: 0.01 # 1/100
  pred_time_interval: 5 # Interval of timesteps between each dynamics prediction (model dt)
  train_valid_ratio: 0.9 # Ratio between training and validation
  dataf: './data/dia/' #Path to dataset
  gen_gif: 0 # Whether to also save gif of each trajectory (for debugging)
  n_his: 5 # Number of history steps to input to the dynamics

  # construct graph
  voxel_size: 0.0216 # Size of the voxel
  down_sample_scale: 3 # Downsample the simulated cloth by a scale of 3 on each dimension
  neighbor_radius: 0.045 # Radius for connecting nearby edges
  use_mesh_edge: true # Whether to use mesh edges
  use_rest_distance: true # Subtract the rest distance for the edge attribute of mesh edges

  num_picker: ${env.num_picker}
  env_shape: ${env.env_shape}
  action_repeat: ${env.action_repeat}
  particle_radius: ${env.particle_radius}
  picker_radius: ${env.picker_radius}
  picker_threshold: ${env.picker_threshold}

### Dataset Collector ###
gen_data:
  dataset: ${dataset}
  env: ${env}

### Model ###
train:
  ### Training ###
  train_mode: 'vsbl' #Should be in ["vsbl", "graph_imit", "full"] - not used anymore
  n_epoch: 1000 # Number of epochs to train
  beta1: 0.9 # Beta1 for Adam optimizer
  lr: 1e-4 # Learning rate
  fixed_lr: false # Whether to use fixed learning rate
  batch_size: 16 # Batch size
  cuda_idx: 0 # Cuda index
  num_workers: 1 # Number of workers for dataloader
  eval: 0 # Whether to evaluate the model
  nstep_eval_rollout: 20 # Number of rollouts to evaluate
  save_model_interval: 5 # Interval to save model
  use_wandb: 0 # Whether to use wandb
  local: false # Whether train local or remote
  output_type: 'vel' # vel or accel

  ### Resume training ###
  edge_model_path: null
  full_dyn_path: null
  partial_dyn_path: null
  load_optim: false

  ### For ablation ###
  fix_collision_edge: false
  use_collision_as_mesh_edge: false

  model:
    global_size: 128 #Number of hidden nodes for global in GNN
    n_his: ${dataset.n_his} # Number of history step input to the dynamics
    proc_layer: 10 # Number of propagation layers
    state_dim: 18 # Dim of node feature input. Computed based on n_his: 3 x 5 + 1 dist to ground + 2 one-hot encoding of picked particle
    relation_dim: 7 # Dim of edge feature input: 3 for directional vector + 1 for directional vector magnitude + 2 for one-hot encoding of mesh or collision edge + 1 for rest distance

  dataset:
    ${dataset}

  env:
    ${env}

### For graph imitation ###
imitation:
  vsbl_lr: 1e-4
  full_lr: 1e-4
  tune_teach: false
  copy_teach: ['encoder', 'decoder']
  imit_w_lat: 1
  imit_w: 5
  reward_w: 1e5
